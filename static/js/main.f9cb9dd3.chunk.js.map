{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","hash","URL","document","window","location","replace","hashToArr","split","map","color","i","id","useState","tags","setTags","colorField","useRef","removeColor","e","colors","filter","tag","target","toLowerCase","useEffect","addEventListener","className","htmlFor","ref","style","marginBottom","type","placeholder","onClick","push","length","current","value","decodeURI","substring","toUpperCase","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6MA6DeA,MAzDf,WACE,IAAMC,EAAO,IAAIC,IAAIC,SAASD,KAAKD,KAC/BA,GACFG,OAAOC,SAASC,QAAQ,0BAG1B,IAAMC,EAAY,SAACN,GAAD,sBAAUA,QAAV,IAAUA,GAAV,UAAUA,EAAMO,MAAM,KAAK,UAA3B,iBAAU,EAAqBA,MAAM,YAArC,aAAU,EAAiCC,KAAI,SAACC,EAAMC,GAAP,MAAc,CAACC,GAAID,EAAGD,MAAOA,OAC9F,EAAwBG,mBAASN,EAAUN,IAA3C,mBAAOa,EAAP,KAAaC,EAAb,KACMC,EAAaC,iBAAO,MASpBC,EAAc,SAACC,GACnB,IACIC,EADiBN,EAAKO,QAAO,SAAAC,GAAG,OAAIA,EAAIV,MAAQO,EAAEI,OAAOX,MACjCH,KAAI,SAAAC,GAAK,OAAIA,EAAMA,MAAMc,iBACrDpB,OAAOC,SAASC,QAAhB,UAA2BF,OAAOC,SAASJ,KAAKO,MAAM,KAAK,GAA3D,wBAAqEY,MASvE,OANAK,qBAAU,WACRrB,OAAOsB,iBAAiB,cAAc,SAAAP,GAAC,OAAIJ,EAAQR,EAAUH,OAAOC,SAASJ,YAC5E,CAACA,IAKF,sBAAK0B,UAAU,MAAf,UAEE,iDAGA,sBAAKA,UAAU,aAAf,UACE,uBAAOC,QAAQ,QAAQD,UAAU,kBAAjC,mBACA,uBAAOE,IAAKb,EAAYc,MAAO,CAAEC,aAAc,OAAQC,KAAK,OAAOL,UAAU,eAAef,GAAG,QAASqB,YAAY,gBACpH,wBAAQC,QA3BG,SAACf,GAChBL,EAAKqB,KAAK,CAACvB,GAAIE,EAAKsB,OAAQ1B,MAAOM,EAAWqB,QAAQC,QACtD,IAAIlB,EAASN,EAAKL,KAAI,SAAAC,GAAK,OAAIA,EAAMA,MAAMc,iBAC3CpB,OAAOC,SAASC,QAAhB,UAA2BF,OAAOC,SAASJ,KAAKO,MAAM,KAAK,GAA3D,wBAAqEY,MAwBtCY,KAAK,SAASL,UAAU,kBAAnD,0BAGF,uBAEA,oBAAIA,UAAU,aAAd,gBACGb,QADH,IACGA,OADH,EACGA,EAAML,KAAI,SAACa,EAAIX,GACd,OAAOW,GACL,oBAAIY,QAAShB,EAAaS,UAAU,oEAAiFf,GAAIU,EAAIV,GAA7H,SACG2B,UAAUjB,EAAIZ,MAAM8B,UAAU,EAAE,GAAGC,cAAgBnB,EAAIZ,MAAM8B,UAAU,KADmClB,EAAIV,aCtC9G8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlD,SAASmD,eAAe,SAM1BZ,K","file":"static/js/main.f9cb9dd3.chunk.js","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\n\n\n\nfunction App() {\n  const hash = new URL(document.URL).hash;\n  if(!hash){\n    window.location.replace('/#tags=red,blue,purple');\n  }\n  \n  const hashToArr = (hash) => hash?.split(\"=\")[1]?.split(',')?.map((color,i) => ({id: i, color: color}));\n  const [tags, setTags] = useState(hashToArr(hash));\n  const colorField = useRef(null);\n\n\n  const addColor = (e) => {\n    tags.push({id: tags.length, color: colorField.current.value});\n    let colors = tags.map(color => color.color.toLowerCase());\n    window.location.replace(`${window.location.hash.split('=')[0]}=${[...colors]}`);\n  }\n\n  const removeColor = (e) => {\n    let filteredColors = tags.filter(tag => tag.id !== +e.target.id);\n    let colors = filteredColors.map(color => color.color.toLowerCase());\n    window.location.replace(`${window.location.hash.split('=')[0]}=${[...colors]}`);\n  }\n\n  useEffect(()=> {\n    window.addEventListener(\"hashchange\", e => setTags(hashToArr(window.location.hash)) );  \n  }, [hash]);\n\n\n\n  return (\n    <div className=\"App\">\n      \n      <h1>Test - Frontend</h1>\n      \n\n      <div className=\"form-group\">\n        <label htmlFor=\"color\" className=\"form-label mt-4\">Color</label>\n        <input ref={colorField} style={{ marginBottom: \"5px\"}} type=\"text\" className=\"form-control\" id=\"color\"  placeholder=\"Enter color\" />  \n        <button onClick={addColor} type=\"button\" className=\"btn btn-success\">Add Color</button>\n      </div>\n\n      <hr />\n      \n      <ul className=\"list-group\">\n        {tags?.map((tag,i) => {\n          return tag && \n            <li onClick={removeColor} className=\"list-group-item d-flex justify-content-between align-items-center\" key={tag.id} id={tag.id}>\n              {decodeURI(tag.color.substring(0,1).toUpperCase() + tag.color.substring(1))}\n            </li>\n          })\n        }\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}